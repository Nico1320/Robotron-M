
Robotron-M.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002c  00800100  00000318  000003ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000318  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000085  0080012c  0080012c  000003d8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003d8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000408  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  00000448  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000cc2  00000000  00000000  00000510  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008ce  00000000  00000000  000011d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006d6  00000000  00000000  00001aa0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000188  00000000  00000000  00002178  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000522  00000000  00000000  00002300  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000282  00000000  00000000  00002822  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  00002aa4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 a1 00 	jmp	0x142	; 0x142 <__vector_18>
  4c:	0c 94 c1 00 	jmp	0x182	; 0x182 <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e1       	ldi	r30, 0x18	; 24
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 32       	cpi	r26, 0x2C	; 44
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac e2       	ldi	r26, 0x2C	; 44
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a1 3b       	cpi	r26, 0xB1	; 177
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 31 01 	call	0x262	; 0x262 <main>
  9e:	0c 94 8a 01 	jmp	0x314	; 0x314 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <initializeHbridge>:
// Prints configuration of pins and timers related to this library
uint8_t debugMode = 0;

void initializeHbridge() {
    // Motor control initialization
    DDRB |= (_BV(PINB0) | _BV(PINB1) | _BV(PINB2));
  a6:	84 b1       	in	r24, 0x04	; 4
  a8:	87 60       	ori	r24, 0x07	; 7
  aa:	84 b9       	out	0x04, r24	; 4
	//		PB0- IN2	  PB1 - IN3    PB2 - IN4     
    DDRD |= (_BV(PIND5) | _BV(PIND6) | _BV(PIND7));
  ac:	8a b1       	in	r24, 0x0a	; 10
  ae:	80 6e       	ori	r24, 0xE0	; 224
  b0:	8a b9       	out	0x0a, r24	; 10
  b2:	08 95       	ret

000000b4 <setupTimer>:
}	//		PD5 - ENB     PD6 - ENA	   PD7 - IN1


void setupTimer() {
    // Sets up Timer/Counter0 for FAST PWM mode with a prescaler of n/1024
    TCCR0A |= (_BV(WGM01) | _BV(WGM00) | _BV(COM0A1) | _BV(COM0B1));
  b4:	84 b5       	in	r24, 0x24	; 36
  b6:	83 6a       	ori	r24, 0xA3	; 163
  b8:	84 bd       	out	0x24, r24	; 36
    TCCR0B |= (_BV(CS02)  | _BV(CS00));
  ba:	85 b5       	in	r24, 0x25	; 37
  bc:	85 60       	ori	r24, 0x05	; 5
  be:	85 bd       	out	0x25, r24	; 37
  c0:	08 95       	ret

000000c2 <setPWM>:
}


void setPWM(uint8_t dutyCycleA, uint8_t dutyCycleB) {
    // Set the OCR0A/B value for a 15.6 kHz frequency at 50% duty cycle
    OCR0A = dutyCycleA;  // PD6
  c2:	87 bd       	out	0x27, r24	; 39
    OCR0B = dutyCycleB;  // PD5
  c4:	68 bd       	out	0x28, r22	; 40
  c6:	08 95       	ret

000000c8 <clearPrevious>:
	clearPrevious();
	PORTB |= (_BV(PINB0) | _BV(PINB2));
}

void clearPrevious() {
	PORTB &= ~(_BV(PINB0) | _BV(PINB1) | _BV(PINB2));
  c8:	85 b1       	in	r24, 0x05	; 5
  ca:	88 7f       	andi	r24, 0xF8	; 248
  cc:	85 b9       	out	0x05, r24	; 5
	PORTD &= ~(_BV(PIND7));
  ce:	8b b1       	in	r24, 0x0b	; 11
  d0:	8f 77       	andi	r24, 0x7F	; 127
  d2:	8b b9       	out	0x0b, r24	; 11
  d4:	08 95       	ret

000000d6 <zeroRadii>:
    OCR0A = dutyCycleA;  // PD6
    OCR0B = dutyCycleB;  // PD5
}

void zeroRadii(int CW) {
	if (!CW) {
  d6:	00 97       	sbiw	r24, 0x00	; 0
  d8:	49 f4       	brne	.+18     	; 0xec <zeroRadii+0x16>
		clearPrevious();
  da:	0e 94 64 00 	call	0xc8	; 0xc8 <clearPrevious>
		PORTD |= _BV(PIND7); // IN1
  de:	8b b1       	in	r24, 0x0b	; 11
  e0:	80 68       	ori	r24, 0x80	; 128
  e2:	8b b9       	out	0x0b, r24	; 11
		PORTB |= _BV(PINB2);  // IN4
  e4:	85 b1       	in	r24, 0x05	; 5
  e6:	84 60       	ori	r24, 0x04	; 4
  e8:	85 b9       	out	0x05, r24	; 5
  ea:	08 95       	ret
	} 
	else if (CW) {
  ec:	89 2b       	or	r24, r25
  ee:	29 f0       	breq	.+10     	; 0xfa <zeroRadii+0x24>
		clearPrevious();
  f0:	0e 94 64 00 	call	0xc8	; 0xc8 <clearPrevious>
		PORTB |= (_BV(PINB0) | _BV(PINB1));  // IN2 and IN4
  f4:	85 b1       	in	r24, 0x05	; 5
  f6:	83 60       	ori	r24, 0x03	; 3
  f8:	85 b9       	out	0x05, r24	; 5
  fa:	08 95       	ret

000000fc <goForward>:
	}
}

void goForward() {
	clearPrevious();
  fc:	0e 94 64 00 	call	0xc8	; 0xc8 <clearPrevious>
    PORTD |= (_BV(PIND7)); 
 100:	8b b1       	in	r24, 0x0b	; 11
 102:	80 68       	ori	r24, 0x80	; 128
 104:	8b b9       	out	0x0b, r24	; 11
    PORTB |= (_BV(PINB1)); 
 106:	85 b1       	in	r24, 0x05	; 5
 108:	82 60       	ori	r24, 0x02	; 2
 10a:	85 b9       	out	0x05, r24	; 5
 10c:	08 95       	ret

0000010e <goBackward>:
}

void goBackward() {
	clearPrevious();
 10e:	0e 94 64 00 	call	0xc8	; 0xc8 <clearPrevious>
	PORTB |= (_BV(PINB0) | _BV(PINB2));
 112:	85 b1       	in	r24, 0x05	; 5
 114:	85 60       	ori	r24, 0x05	; 5
 116:	85 b9       	out	0x05, r24	; 5
 118:	08 95       	ret

0000011a <usart0_init>:
 * Initialize the USART.
 */
void usart0_init(void)
{
    // Configure the baud rate
    UBRR0H = (unsigned char)(myUBRR >> 8);
 11a:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
    UBRR0L = (unsigned char)myUBRR;
 11e:	87 e6       	ldi	r24, 0x67	; 103
 120:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
    UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
 124:	86 e0       	ldi	r24, 0x06	; 6
 126:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
    // Enable USART receiver and transmitter
    UCSR0B = ((1 << RXEN0) | (1 << TXEN0) | (1 << RXCIE0));
 12a:	88 e9       	ldi	r24, 0x98	; 152
 12c:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>

    // Flush buffers
    unsigned char x = 0;
    USART_RxTail = x;
 130:	10 92 6e 01 	sts	0x016E, r1	; 0x80016e <USART_RxTail>
    USART_RxHead = x;
 134:	10 92 6f 01 	sts	0x016F, r1	; 0x80016f <USART_RxHead>
    USART_TxTail = x;
 138:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <__data_end>
    USART_TxHead = x;
 13c:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <USART_TxHead>
 140:	08 95       	ret

00000142 <__vector_18>:
/*
 * Interrupt handler for received data.
 * Data is placed in the receive buffer.
 */
ISR(USART_RX_vect)
{
 142:	1f 92       	push	r1
 144:	0f 92       	push	r0
 146:	0f b6       	in	r0, 0x3f	; 63
 148:	0f 92       	push	r0
 14a:	11 24       	eor	r1, r1
 14c:	8f 93       	push	r24
 14e:	9f 93       	push	r25
 150:	ef 93       	push	r30
 152:	ff 93       	push	r31
    char data;
    unsigned char tmphead;

    // Read the received data
    data = UDR0;
 154:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>

    // Calculate buffer index
    tmphead = (USART_RxHead + 1) & USART_RX_BUFFER_MASK;
 158:	e0 91 6f 01 	lds	r30, 0x016F	; 0x80016f <USART_RxHead>
 15c:	ef 5f       	subi	r30, 0xFF	; 255
 15e:	ef 73       	andi	r30, 0x3F	; 63

    // Store new index
    USART_RxHead = tmphead;
 160:	e0 93 6f 01 	sts	0x016F, r30	; 0x80016f <USART_RxHead>

    if (tmphead == USART_RxTail)
 164:	90 91 6e 01 	lds	r25, 0x016E	; 0x80016e <USART_RxTail>
        // ERROR! Receive buffer overflow
        // Handle the overflow condition (e.g., set an overflow flag or reset the buffer)
    }

    // Store received data in buffer
    USART_RxBuf[tmphead] = data;
 168:	f0 e0       	ldi	r31, 0x00	; 0
 16a:	e0 59       	subi	r30, 0x90	; 144
 16c:	fe 4f       	sbci	r31, 0xFE	; 254
 16e:	80 83       	st	Z, r24
}
 170:	ff 91       	pop	r31
 172:	ef 91       	pop	r30
 174:	9f 91       	pop	r25
 176:	8f 91       	pop	r24
 178:	0f 90       	pop	r0
 17a:	0f be       	out	0x3f, r0	; 63
 17c:	0f 90       	pop	r0
 17e:	1f 90       	pop	r1
 180:	18 95       	reti

00000182 <__vector_19>:
 * Interrupt handler for transmit data.
 * Data is read from the transmit buffer. If all data was transmitted,
 * transmit interrupts are disabled.
 */
ISR(USART_UDRE_vect)
{
 182:	1f 92       	push	r1
 184:	0f 92       	push	r0
 186:	0f b6       	in	r0, 0x3f	; 63
 188:	0f 92       	push	r0
 18a:	11 24       	eor	r1, r1
 18c:	8f 93       	push	r24
 18e:	9f 93       	push	r25
 190:	ef 93       	push	r30
 192:	ff 93       	push	r31
    unsigned char tmptail;

    // Check if all data is transmitted
    if (USART_TxHead != USART_TxTail)
 194:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <USART_TxHead>
 198:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <__data_end>
 19c:	98 17       	cp	r25, r24
 19e:	69 f0       	breq	.+26     	; 0x1ba <__vector_19+0x38>
    {
        // Calculate buffer index
        tmptail = (USART_TxTail + 1) & USART_TX_BUFFER_MASK;
 1a0:	e0 91 2c 01 	lds	r30, 0x012C	; 0x80012c <__data_end>
 1a4:	ef 5f       	subi	r30, 0xFF	; 255
 1a6:	ef 73       	andi	r30, 0x3F	; 63

        // Store new index
        USART_TxTail = tmptail;
 1a8:	e0 93 2c 01 	sts	0x012C, r30	; 0x80012c <__data_end>

        // Start transmission
        UDR0 = USART_TxBuf[tmptail];
 1ac:	f0 e0       	ldi	r31, 0x00	; 0
 1ae:	e2 5d       	subi	r30, 0xD2	; 210
 1b0:	fe 4f       	sbci	r31, 0xFE	; 254
 1b2:	80 81       	ld	r24, Z
 1b4:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 1b8:	05 c0       	rjmp	.+10     	; 0x1c4 <__vector_19+0x42>
    }
    else
    {
        // Disable UDRE interrupt
        UCSR0B &= ~(1 << UDRIE0);
 1ba:	e1 ec       	ldi	r30, 0xC1	; 193
 1bc:	f0 e0       	ldi	r31, 0x00	; 0
 1be:	80 81       	ld	r24, Z
 1c0:	8f 7d       	andi	r24, 0xDF	; 223
 1c2:	80 83       	st	Z, r24
    }
}
 1c4:	ff 91       	pop	r31
 1c6:	ef 91       	pop	r30
 1c8:	9f 91       	pop	r25
 1ca:	8f 91       	pop	r24
 1cc:	0f 90       	pop	r0
 1ce:	0f be       	out	0x3f, r0	; 63
 1d0:	0f 90       	pop	r0
 1d2:	1f 90       	pop	r1
 1d4:	18 95       	reti

000001d6 <usart0_receive>:
 */
char usart0_receive(void)
{
    unsigned char tmptail;
    // Wait for incoming data
    while (USART_RxHead == USART_RxTail)
 1d6:	90 91 6f 01 	lds	r25, 0x016F	; 0x80016f <USART_RxHead>
 1da:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <USART_RxTail>
 1de:	98 17       	cp	r25, r24
 1e0:	d1 f3       	breq	.-12     	; 0x1d6 <usart0_receive>
        ;

    // Calculate buffer index
    tmptail = (USART_RxTail + 1) & USART_RX_BUFFER_MASK;
 1e2:	e0 91 6e 01 	lds	r30, 0x016E	; 0x80016e <USART_RxTail>
 1e6:	ef 5f       	subi	r30, 0xFF	; 255
 1e8:	ef 73       	andi	r30, 0x3F	; 63

    // Store new index
    USART_RxTail = tmptail;
 1ea:	e0 93 6e 01 	sts	0x016E, r30	; 0x80016e <USART_RxTail>

    // Return data
    return USART_RxBuf[tmptail];
 1ee:	f0 e0       	ldi	r31, 0x00	; 0
 1f0:	e0 59       	subi	r30, 0x90	; 144
 1f2:	fe 4f       	sbci	r31, 0xFE	; 254
}
 1f4:	80 81       	ld	r24, Z
 1f6:	08 95       	ret

000001f8 <usart0_transmit>:
void usart0_transmit(char data)
{
    unsigned char tmphead;

    // Calculate buffer index
    tmphead = (USART_TxHead + 1) & USART_TX_BUFFER_MASK;
 1f8:	20 91 2d 01 	lds	r18, 0x012D	; 0x80012d <USART_TxHead>
 1fc:	2f 5f       	subi	r18, 0xFF	; 255
 1fe:	2f 73       	andi	r18, 0x3F	; 63

    // Wait for free space in buffer
    while (tmphead == USART_TxTail)
 200:	90 91 2c 01 	lds	r25, 0x012C	; 0x80012c <__data_end>
 204:	29 17       	cp	r18, r25
 206:	e1 f3       	breq	.-8      	; 0x200 <usart0_transmit+0x8>
        ;

    // Store data in buffer
    USART_TxBuf[tmphead] = data;
 208:	e2 2f       	mov	r30, r18
 20a:	f0 e0       	ldi	r31, 0x00	; 0
 20c:	e2 5d       	subi	r30, 0xD2	; 210
 20e:	fe 4f       	sbci	r31, 0xFE	; 254
 210:	80 83       	st	Z, r24

    // Store new index
    USART_TxHead = tmphead;
 212:	20 93 2d 01 	sts	0x012D, r18	; 0x80012d <USART_TxHead>

    // Enable UDRE interrupt
    UCSR0B |= (1 << UDRIE0);
 216:	e1 ec       	ldi	r30, 0xC1	; 193
 218:	f0 e0       	ldi	r31, 0x00	; 0
 21a:	80 81       	ld	r24, Z
 21c:	80 62       	ori	r24, 0x20	; 32
 21e:	80 83       	st	Z, r24
 220:	08 95       	ret

00000222 <usart0_nUnread>:
/*
 * This function returns the number of unread bytes in the receive buffer.
 */
unsigned char usart0_nUnread(void)
{
    if (USART_RxHead >= USART_RxTail)
 222:	90 91 6f 01 	lds	r25, 0x016F	; 0x80016f <USART_RxHead>
 226:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <USART_RxTail>
 22a:	98 17       	cp	r25, r24
 22c:	30 f0       	brcs	.+12     	; 0x23a <usart0_nUnread+0x18>
        return USART_RxHead - USART_RxTail;
 22e:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <USART_RxHead>
 232:	90 91 6e 01 	lds	r25, 0x016E	; 0x80016e <USART_RxTail>
 236:	89 1b       	sub	r24, r25
 238:	08 95       	ret
    else
        return USART_RX_BUFFER_SIZE - USART_RxTail + USART_RxHead;
 23a:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <USART_RxHead>
 23e:	90 91 6e 01 	lds	r25, 0x016E	; 0x80016e <USART_RxTail>
 242:	89 1b       	sub	r24, r25
 244:	80 5c       	subi	r24, 0xC0	; 192
}
 246:	08 95       	ret

00000248 <usart0_transmit_str>:
 * transmit a byte via the USART
 * - Bytes are transmitted until the terminator
 * character '\0' is detected. Then the function returns.
 */
void usart0_transmit_str(char *str)
{
 248:	cf 93       	push	r28
 24a:	df 93       	push	r29
 24c:	ec 01       	movw	r28, r24
    while (*str)
 24e:	03 c0       	rjmp	.+6      	; 0x256 <usart0_transmit_str+0xe>
    {
        usart0_transmit(*str++);
 250:	21 96       	adiw	r28, 0x01	; 1
 252:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <usart0_transmit>
 * - Bytes are transmitted until the terminator
 * character '\0' is detected. Then the function returns.
 */
void usart0_transmit_str(char *str)
{
    while (*str)
 256:	88 81       	ld	r24, Y
 258:	81 11       	cpse	r24, r1
 25a:	fa cf       	rjmp	.-12     	; 0x250 <usart0_transmit_str+0x8>
    {
        usart0_transmit(*str++);
    }
}
 25c:	df 91       	pop	r29
 25e:	cf 91       	pop	r28
 260:	08 95       	ret

00000262 <main>:
	UBRR0H = 0;
	UBRR0L = 0;
}

int main(void) {
	usart0_init();
 262:	0e 94 8d 00 	call	0x11a	; 0x11a <usart0_init>
	sei();
 266:	78 94       	sei
	initializeHbridge();
 268:	0e 94 53 00 	call	0xa6	; 0xa6 <initializeHbridge>
	setupTimer();
 26c:	0e 94 5a 00 	call	0xb4	; 0xb4 <setupTimer>
	usart0_transmit_str("\r\nMain loop running!\r\n");
 270:	80 e0       	ldi	r24, 0x00	; 0
 272:	91 e0       	ldi	r25, 0x01	; 1
 274:	0e 94 24 01 	call	0x248	; 0x248 <usart0_transmit_str>

	while (1)
	{
		if (usart0_nUnread() > 0)
 278:	0e 94 11 01 	call	0x222	; 0x222 <usart0_nUnread>
 27c:	88 23       	and	r24, r24
 27e:	09 f4       	brne	.+2      	; 0x282 <main+0x20>
 280:	3f c0       	rjmp	.+126    	; 0x300 <main+0x9e>
		{
			char data = usart0_receive();
 282:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <usart0_receive>
			switch (data)
 286:	84 36       	cpi	r24, 0x64	; 100
 288:	f9 f0       	breq	.+62     	; 0x2c8 <main+0x66>
 28a:	18 f4       	brcc	.+6      	; 0x292 <main+0x30>
 28c:	81 36       	cpi	r24, 0x61	; 97
 28e:	99 f0       	breq	.+38     	; 0x2b6 <main+0x54>
 290:	24 c0       	rjmp	.+72     	; 0x2da <main+0x78>
 292:	83 37       	cpi	r24, 0x73	; 115
 294:	49 f0       	breq	.+18     	; 0x2a8 <main+0x46>
 296:	87 37       	cpi	r24, 0x77	; 119
 298:	01 f5       	brne	.+64     	; 0x2da <main+0x78>
			{
				case 'w':
				setPWM(200, 200);
 29a:	68 ec       	ldi	r22, 0xC8	; 200
 29c:	88 ec       	ldi	r24, 0xC8	; 200
 29e:	0e 94 61 00 	call	0xc2	; 0xc2 <setPWM>
				goForward();
 2a2:	0e 94 7e 00 	call	0xfc	; 0xfc <goForward>
				break;
 2a6:	1f c0       	rjmp	.+62     	; 0x2e6 <main+0x84>

				case 's':
				setPWM(200, 200);
 2a8:	68 ec       	ldi	r22, 0xC8	; 200
 2aa:	88 ec       	ldi	r24, 0xC8	; 200
 2ac:	0e 94 61 00 	call	0xc2	; 0xc2 <setPWM>
				goBackward();
 2b0:	0e 94 87 00 	call	0x10e	; 0x10e <goBackward>
				break;
 2b4:	18 c0       	rjmp	.+48     	; 0x2e6 <main+0x84>

				case 'a':
				setPWM(200, 200);
 2b6:	68 ec       	ldi	r22, 0xC8	; 200
 2b8:	88 ec       	ldi	r24, 0xC8	; 200
 2ba:	0e 94 61 00 	call	0xc2	; 0xc2 <setPWM>
				zeroRadii(0);
 2be:	80 e0       	ldi	r24, 0x00	; 0
 2c0:	90 e0       	ldi	r25, 0x00	; 0
 2c2:	0e 94 6b 00 	call	0xd6	; 0xd6 <zeroRadii>
				break;
 2c6:	0f c0       	rjmp	.+30     	; 0x2e6 <main+0x84>

				case 'd':
				setPWM(200, 200);
 2c8:	68 ec       	ldi	r22, 0xC8	; 200
 2ca:	88 ec       	ldi	r24, 0xC8	; 200
 2cc:	0e 94 61 00 	call	0xc2	; 0xc2 <setPWM>
				zeroRadii(1);
 2d0:	81 e0       	ldi	r24, 0x01	; 1
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	0e 94 6b 00 	call	0xd6	; 0xd6 <zeroRadii>
				break;
 2d8:	06 c0       	rjmp	.+12     	; 0x2e6 <main+0x84>

				default:
				usart0_transmit_str("No input detected\r\n");
 2da:	87 e1       	ldi	r24, 0x17	; 23
 2dc:	91 e0       	ldi	r25, 0x01	; 1
 2de:	0e 94 24 01 	call	0x248	; 0x248 <usart0_transmit_str>
				clearPrevious();
 2e2:	0e 94 64 00 	call	0xc8	; 0xc8 <clearPrevious>
				break;
			}

			// Set the flag to indicate a key was pressed
			keyPressed = 1;
 2e6:	81 e0       	ldi	r24, 0x01	; 1
 2e8:	80 93 b0 01 	sts	0x01B0, r24	; 0x8001b0 <keyPressed>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2ec:	2f ef       	ldi	r18, 0xFF	; 255
 2ee:	80 e7       	ldi	r24, 0x70	; 112
 2f0:	92 e0       	ldi	r25, 0x02	; 2
 2f2:	21 50       	subi	r18, 0x01	; 1
 2f4:	80 40       	sbci	r24, 0x00	; 0
 2f6:	90 40       	sbci	r25, 0x00	; 0
 2f8:	e1 f7       	brne	.-8      	; 0x2f2 <main+0x90>
 2fa:	00 c0       	rjmp	.+0      	; 0x2fc <main+0x9a>
 2fc:	00 00       	nop
 2fe:	bc cf       	rjmp	.-136    	; 0x278 <main+0x16>
			_delay_ms(SAMPLING_TIME_MS);
		}
		else
		{
			// Check if no keys are pressed after a key press
			if (keyPressed)
 300:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <keyPressed>
 304:	88 23       	and	r24, r24
 306:	09 f4       	brne	.+2      	; 0x30a <main+0xa8>
 308:	b7 cf       	rjmp	.-146    	; 0x278 <main+0x16>
			{
				clearPrevious();
 30a:	0e 94 64 00 	call	0xc8	; 0xc8 <clearPrevious>
				keyPressed = 0; // Reset the flag
 30e:	10 92 b0 01 	sts	0x01B0, r1	; 0x8001b0 <keyPressed>
 312:	b2 cf       	rjmp	.-156    	; 0x278 <main+0x16>

00000314 <_exit>:
 314:	f8 94       	cli

00000316 <__stop_program>:
 316:	ff cf       	rjmp	.-2      	; 0x316 <__stop_program>
